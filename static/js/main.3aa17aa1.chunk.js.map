{"version":3,"sources":["components/cover.js","components/loremSection.js","App.js","index.js"],"names":["Cover","useEffect","document","title","className","to","useStyles","makeStyles","margin","minWidth","background","iconStyle","cursor","heading","textTransform","flexCenterBetween","display","justifyContent","alignItems","LoremSection","useState","count","type","formValues","setFormValues","open","setOpen","text","setText","dark","setDark","classes","switchLight","theme","localStorage","setItem","handleSubmit","e","a","url","preventDefault","amount","parseInt","fetch","response","json","newTexts","slice","length","Snackbar","anchorOrigin","vertical","horizontal","onClose","autoHideDuration","message","Container","style","marginTop","maxWidth","Typography","variant","Icon","fontSize","color","onClick","onSubmit","FormControl","TextField","label","name","value","onChange","target","InputLabel","htmlFor","Select","labelId","MenuItem","Button","size","map","item","index","App","basename","path","exact","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3aa17aa1.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport \"./cover.css\";\nimport { Link } from \"react-router-dom\";\nfunction Cover() {\n  useEffect(() => {\n    document.title = \"Dorem Ipsum\";\n  });\n\n  return (\n    <div className='landing-section'>\n      <div className='container'>\n        <h3>copy more type less</h3>\n        <Link to='/lorem'>let's copy</Link>\n      </div>\n    </div>\n  );\n}\n\nexport default Cover;\n","import React, { useState } from \"react\";\nimport \"./loremSection.css\";\nimport {\n  Select,\n  makeStyles,\n  InputLabel,\n  MenuItem,\n  TextField,\n  Container,\n  FormControl,\n  Typography,\n  Button,\n  Icon,\n  Snackbar,\n} from \"@material-ui/core\";\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\nimport Brightness2Icon from \"@material-ui/icons/Brightness2\";\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\n\nconst useStyles = makeStyles({\n  margin: {\n    minWidth: 180,\n    margin: \"12px 0px\",\n    background: \"#ffffff\",\n  },\n  iconStyle: {\n    cursor: \"pointer\",\n  },\n  heading: {\n    textTransform: \"uppercase\",\n  },\n  flexCenterBetween: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n});\n\nfunction LoremSection() {\n  const [formValues, setFormValues] = useState({\n    count: 0,\n    type: \"\",\n  });\n  const [open, setOpen] = useState(false);\n  const [text, setText] = useState([]);\n  const [dark, setDark] = useState(\"\");\n  const classes = useStyles();\n  const switchLight = (theme) => {\n    localStorage.setItem(\"theme\", theme);\n    setDark(theme);\n  };\n\n  const handleSubmit = async (e) => {\n    if (formValues.type === \"\") {\n      return;\n    }\n    const url = `https://hipsum.co/api/?type=${formValues.type}&paras=50`;\n    e.preventDefault();\n    let amount = parseInt(formValues.count);\n    const response = await fetch(url);\n    const newTexts = await response.json();\n\n    //show atleast one paragraph if count == 0\n    if (formValues.count <= 0) {\n      amount = 1;\n    }\n    setText(newTexts.slice(0, amount));\n    //condition if count goes above the total length of the data, it will show all the paragraphs inside your array\n    if (formValues.count > text.length) {\n      amount = text.length;\n    }\n  };\n  const handleSnackClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <div\n        className={\n          (dark === \"dark\" ? \"app__dark\" : \"app__light\") + \" app_basic\"\n        }>\n        <Snackbar\n          anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n          open={open}\n          onClose={handleSnackClose}\n          autoHideDuration={2500}\n          message={\"Copied to Clipboard!\"}\n        />\n        <Container style={{ marginTop: \"40px\" }} maxWidth={\"lg\"}>\n          <Container maxWidth={\"lg\"} className={classes.flexCenterBetween}>\n            <Typography\n              variant={\"h3\"}\n              className={\n                classes.heading +\n                \" \" +\n                (dark === \"dark\" ? \"head_dark\" : \"head_light\")\n              }>\n              {\"tired of lorem ipsum\"}\n            </Typography>\n            <Icon fontSize={\"large\"}>\n              {dark === \"dark\" ? (\n                <WbSunnyIcon\n                  fontSize={\"large\"}\n                  className={classes.iconStyle}\n                  style={{ color: \"white\" }}\n                  onClick={() => switchLight(\"light\")}\n                />\n              ) : (\n                <Brightness2Icon\n                  fontSize={\"large\"}\n                  className={classes.iconStyle}\n                  onClick={() => {\n                    switchLight(\"dark\");\n                  }}\n                />\n              )}\n            </Icon>\n          </Container>\n          <form\n            className='lorem-form'\n            onSubmit={handleSubmit}\n            style={{ marginTop: 10 }}>\n            <FormControl className={classes.margin} color={\"primary\"}>\n              <TextField\n                type={\"number\"}\n                label={\"Paragraphs\"}\n                variant={\"filled\"}\n                name={\"amount\"}\n                value={formValues.count}\n                onChange={(e) =>\n                  setFormValues({ ...formValues, count: e.target.value })\n                }\n              />\n            </FormControl>\n            <FormControl\n              className={classes.margin}\n              variant={\"filled\"}\n              color={\"primary\"}>\n              <InputLabel htmlFor={\"version-select\"}>\n                {\"Choose version\"}\n              </InputLabel>\n              <Select\n                label={\"choose version\"}\n                color={\"primary\"}\n                value={formValues.type}\n                labelId={\"version-select\"}\n                onChange={(e) =>\n                  setFormValues({ ...formValues, type: e.target.value })\n                }>\n                <MenuItem value={\"hipster-latin\"}>\n                  {\"Hipster Speak Only\"}\n                </MenuItem>\n                <MenuItem value={\"hipster-centric\"}>\n                  {\"Hipster Speak with Latin\"}\n                </MenuItem>\n              </Select>\n            </FormControl>\n            <Button\n              size={\"large\"}\n              type={\"submit\"}\n              variant={\"contained\"}\n              color={\"primary\"}>\n              {\"Generate\"}\n            </Button>\n          </form>\n          <Container\n            maxWidth={\"lg\"}\n            style={\n              dark === \"dark\"\n                ? { color: \"#a9f1df\" }\n                : { color: \"hsl(210, 22%, 49%)\" }\n            }>\n            {text?.length ? (\n              <Container maxWidth={\"lg\"} className={classes.flexCenterBetween}>\n                <CopyToClipboard text={text}>\n                  <Icon\n                    fontSize={\"large\"}\n                    color={\"primary\"}\n                    className={classes.iconStyle}>\n                    <FileCopyIcon\n                      onClick={() => setOpen(true)}\n                      fontSize={\"large\"}\n                    />\n                  </Icon>\n                </CopyToClipboard>\n              </Container>\n            ) : null}\n            <div className={\"lorem-text\"}>\n              {text?.map((item, index) => {\n                return (\n                  <p style={{ marginTop: \"20px\" }} key={index}>\n                    {item}\n                  </p>\n                );\n              })}\n            </div>\n          </Container>\n        </Container>\n      </div>\n    </>\n  );\n}\n\nexport default LoremSection;\n","import React from \"react\";\nimport Cover from \"./components/cover.js\";\nimport LoremSection from \"./components/loremSection.js\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router basename={\"/\"}>\n      <Switch>\n        <Route path='/' exact={true}>\n          <Cover />\n        </Route>\n        <Router path='/lorem' exact={true}>\n          <LoremSection />\n        </Router>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}